#!/usr/bin/env python3

import json
import math
import sys
from scipy.spatial.distance import euclidean


def oned_edist(m, p):
    return math.sqrt((p - m) ** 2 )

def twod_edist(mu, mp, pu, pp):
    return math.sqrt((pu - mu) ** 2 + (pp - mp) ** 2)

def findmax(distlist):
    return max(distlist), distlist.index(max(distlist))

def findmin(distlist):
    return min(distlist), distlist.index(min(distlist))


masterfile = sys.argv[1]
partslist = sys.argv[2]


mfp = open(masterfile)
pfp = open(partslist)

mastermodel = json.load(mfp)

munpair, mpair = mastermodel['structure_model']['A'][0][0], mastermodel['structure_model']['A'][1][0]
mvector = [munpair, mpair]


partfiles = pfp.readlines()

twod_distances = []
test_dist = []
'''
unpaired_distances = []
paired_distances = []
'''
dirs = []

for partfile in partfiles:
    partfp = open(partfile.strip())
    partnum = partfile.strip().split('/')[-2]

    #partdir = pathlist[-2]

    partmodel = json.load(partfp)

    punpair, ppair = partmodel['structure_model']['A'][0][0], partmodel['structure_model']['A'][1][0]
    pvector = [punpair, ppair]
    twod_distances.append(twod_edist(munpair, mpair, punpair, ppair))
    test_dist.append(euclidean(mvector, pvector))
    dirs.append(partnum)

"""    unpaired_distances.append(oned_edist(munpair, punpair))
    paired_distances.append(oned_edist(mpair,ppair))"""


twodmax,tdmnum = findmax(twod_distances)
#pmax, pmnum = findmax(paired_distances)
twodmin, tdminnum = findmin(twod_distances)
#unpmin, unpminnum = findmin(unpaired_distances)
#pmin, pminnum = findmin(paired_distances)


"""print("Unpaired", unpmax, dirs[unpmnum])
print("Paired", pmax, dirs[pmnum])"""
"""print("Unpaired:", unpmin, dirs[unpminnum])
print("Paired:", pmin, dirs[pminnum])"""


print("Results:")

print(f'Partition\tDistance')

for dir, twod in zip(dirs, twod_distances):
    print(f'{dir}\t{twod}')

print(f'min\t{dirs[tdminnum]}\t{twodmin}')
print(f'max\t{dirs[tdmnum]}\t{twodmax}')


mfp.close()
pfp.close()
